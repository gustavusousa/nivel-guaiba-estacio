import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os

# --- 1. CONFIGURA칂츾O DA P츼GINA ---
st.set_page_config(page_title="Observat칩rio Gua칤ba", layout="wide")

# --- 2. CARREGAMENTO E CACHE DOS DADOS ---
@st.cache_data
def carregar_dados():
    """
    Carrega os dados consolidados do arquivo CSV, converte a coluna de data
    e a define como 칤ndice do DataFrame.
    """
    caminho_arquivo = "dados_consolidados_guaiba_chuva.csv"
    if not os.path.exists(caminho_arquivo):
        st.error(f"Arquivo de dados '{caminho_arquivo}' n칚o encontrado. "
                 f"Por favor, execute primeiro o script '1_processamento_dados.py'.")
        st.stop() # Interrompe a execu칞칚o se os dados n칚o existirem
    
    df = pd.read_csv(caminho_arquivo, sep=';', decimal=',')
    df['Data'] = pd.to_datetime(df['Data'])
    df.set_index('Data', inplace=True)
    return df

# --- FUN칂츾O CACHEADA PARA C츼LCULO DE CORRELA칂츾O ---
@st.cache_data
def calcular_correlacao_com_lag(df, max_lag=15):
    """
    Calcula a correla칞칚o entre o n칤vel do rio e a precipita칞칚o com diferentes lags.
    
    Args:
        df (pd.DataFrame): DataFrame com 'Nivel_m' e 'Precipitacao_mm'.
        max_lag (int): N칰mero m치ximo de dias de atraso a serem testados.
        
    Returns:
        tuple: Contendo o melhor lag (int), a melhor correla칞칚o (float), 
               e um dicion치rio com todas as correla칞칫es por lag.
    """
    correlacoes = {}
    for lag in range(1, max_lag + 1):
        # Cria uma nova coluna com a soma da chuva nos 'lag' dias anteriores.
        # .shift(1) garante que estamos olhando para dias passados, n칚o o dia atual.
        chuva_acumulada = df['Precipitacao_mm'].shift(1).rolling(window=lag).sum()
        
        # Calcula a correla칞칚o de Pearson entre o n칤vel do rio e a chuva acumulada.
        corr = df['Nivel_m'].corr(chuva_acumulada)
        
        if pd.notna(corr):
            correlacoes[lag] = corr
            
    if not correlacoes:
        return None, None, None
        
    # Encontra o lag com a maior correla칞칚o
    melhor_lag = max(correlacoes, key=correlacoes.get)
    melhor_corr = correlacoes[melhor_lag]
    
    return melhor_lag, melhor_corr, correlacoes

# Carrega os dados na inicializa칞칚o do app.
df = carregar_dados()

# --- 3. T칈TULO E INTRODU칂츾O ---
st.title("游깱 Observat칩rio Gua칤ba: An치lise Comparativa das Cheias")
st.markdown("""
Esta aplica칞칚o analisa a rela칞칚o entre o volume de chuvas e o n칤vel do Rio Gua칤ba, 
com foco na compara칞칚o entre o per칤odo da enchente hist칩rica de 2024 e o mesmo per칤odo de 2025.
Utilize as visualiza칞칫es abaixo para explorar os dados.
""")

# --- 4. L칍GICA PRINCIPAL E VISUALIZA칂칏ES ---
# Define os per칤odos de an치lise.
inicio_periodo_2024 = '2024-04-30'
fim_periodo_2024 = '2024-06-30'
inicio_periodo_2025 = '2025-04-30'
fim_periodo_2025 = '2025-06-30'

# Filtra os DataFrames para cada per칤odo.
df_2024 = df.loc[inicio_periodo_2024:fim_periodo_2024]
df_2025 = df.loc[inicio_periodo_2025:fim_periodo_2025]

# --- SE칂츾O DE AN츼LISE COMPARATIVA ---
st.header("An치lise Comparativa: Enchente de 2024 vs. 2025")
st.markdown("Compara칞칚o direta do n칤vel do rio durante o per칤odo cr칤tico (30/Abr a 30/Jun).")

# Gr치fico comparativo do N칤vel do Rio
fig_comparativa = go.Figure()
fig_comparativa.add_trace(go.Scatter(
    x=df_2024.index.strftime('%d-%b'), y=df_2024['Nivel_m'], mode='lines',
    name='N칤vel do Rio em 2024', line=dict(color='rgba(220, 53, 69, 0.8)', width=3)
))
fig_comparativa.add_trace(go.Scatter(
    x=df_2025.index.strftime('%d-%b'), y=df_2025['Nivel_m'], mode='lines',
    name='N칤vel do Rio em 2025', line=dict(color='rgba(25, 135, 84, 0.8)', width=3)
))
fig_comparativa.add_hline(y=3.0, line_dash="dash", line_color="blue",
                          annotation_text="Cota de Inunda칞칚o (3.0m)", 
                          annotation_position="bottom right")
fig_comparativa.update_layout(
    title='N칤vel do Rio Gua칤ba: 2024 vs. 2025', xaxis_title='Data',
    yaxis_title='N칤vel do Rio (metros)', legend_title='Ano', hovermode='x unified'
)
st.plotly_chart(fig_comparativa, use_container_width=True)

# --- M칄TRICAS PRINCIPAIS ---
st.subheader("Resumo dos Per칤odos")
col1, col2 = st.columns(2)
with col1:
    st.markdown("#### Per칤odo Cr칤tico de 2024")
    pico_24, chuva_24 = df_2024['Nivel_m'].max(), df_2024['Precipitacao_mm'].sum()
    st.metric(label="Pico do N칤vel do Rio", value=f"{pico_24:.2f} m", delta="Hist칩rico", delta_color="inverse")
    st.metric(label="Chuva Acumulada no Per칤odo", value=f"{chuva_24:.1f} mm")
with col2:
    st.markdown("#### Per칤odo Comparativo de 2025")
    pico_25, chuva_25 = df_2025['Nivel_m'].max(), df_2025['Precipitacao_mm'].sum()
    delta_nivel = pico_25 - pico_24
    st.metric(label="Pico do N칤vel do Rio", value=f"{pico_25:.2f} m", delta=f"{delta_nivel:.2f} m vs 2024")
    st.metric(label="Chuva Acumulada no Per칤odo", value=f"{chuva_25:.1f} mm")

# --- SE칂츾O DE AN츼LISE DETALHADA POR ANO ---
st.header("An치lise Detalhada por Ano")
ano_detalhe = st.selectbox("Selecione o ano para ver o detalhe:", [2024, 2025], index=0, key="detalhe")
df_detalhe = df_2024 if ano_detalhe == 2024 else df_2025
fig_detalhe = make_subplots(specs=[[{"secondary_y": True}]])
fig_detalhe.add_trace(go.Bar(x=df_detalhe.index, y=df_detalhe['Precipitacao_mm'], name='Precipita칞칚o (mm)', marker_color='lightblue'), secondary_y=False)
fig_detalhe.add_trace(go.Scatter(x=df_detalhe.index, y=df_detalhe['Nivel_m'], name='N칤vel do Rio (m)', line=dict(color='darkblue', width=3)), secondary_y=True)
fig_detalhe.add_hline(y=3.0, line_dash="dash", line_color="red", secondary_y=True, annotation_text="Cota de Inunda칞칚o", annotation_position="bottom right")
fig_detalhe.update_layout(title_text=f'Chuva Di치ria vs. N칤vel do Rio em {ano_detalhe}', hovermode='x unified')
fig_detalhe.update_yaxes(title_text='Precipita칞칚o (mm)', secondary_y=False)
fig_detalhe.update_yaxes(title_text='N칤vel do Rio (m)', secondary_y=True)
st.plotly_chart(fig_detalhe, use_container_width=True)

# --- NOVA SE칂츾O: FASE 3 - AN츼LISE DE CORRELA칂츾O ---
st.header("An치lise de Correla칞칚o: O Atraso entre a Chuva e a Cheia")
st.markdown("""
O n칤vel do rio n칚o sobe instantaneamente. Existe um **atraso (lag)** entre a precipita칞칚o e o pico da cheia. 
Esta an치lise calcula a correla칞칚o entre a chuva acumulada em diferentes janelas de tempo (1 a 15 dias) e o n칤vel do rio, 
para descobrir qual per칤odo de chuva tem maior impacto.
""")

ano_corr = st.selectbox("Selecione o ano para a an치lise de correla칞칚o:", [2024, 2025], index=0, key="correlacao")
df_corr = df_2024 if ano_corr == 2024 else df_2025

# Executa a fun칞칚o de c치lculo
melhor_lag, melhor_corr, todas_correlacoes = calcular_correlacao_com_lag(df_corr.copy())

if melhor_lag:
    st.success(f"**Resultado para {ano_corr}:** A correla칞칚o mais forte (**{melhor_corr:.2f}**) foi encontrada com um atraso de **{melhor_lag} dias**.")
    
    col_corr1, col_corr2 = st.columns(2)
    
    with col_corr1:
        # Gr치fico 1: Barras mostrando a correla칞칚o para cada lag
        fig_corr_barras = go.Figure()
        fig_corr_barras.add_trace(go.Bar(
            x=list(todas_correlacoes.keys()),
            y=list(todas_correlacoes.values()),
            marker_color='skyblue'
        ))
        # Destaca a barra com a maior correla칞칚o
        fig_corr_barras.add_trace(go.Bar(
            x=[melhor_lag],
            y=[melhor_corr],
            marker_color='salmon',
            name='Melhor Atraso'
        ))
        fig_corr_barras.update_layout(
            title=f'Correla칞칚o por Atraso (Lag) em {ano_corr}',
            xaxis_title='Atraso em dias (Lag)',
            yaxis_title='Coeficiente de Correla칞칚o',
            showlegend=False
        )
        st.plotly_chart(fig_corr_barras, use_container_width=True)
        
    with col_corr2:
        # Gr치fico 2: Dispers칚o para visualizar a rela칞칚o no melhor lag
        df_plot_corr = df_corr.copy()
        df_plot_corr['Chuva_Acumulada'] = df_plot_corr['Precipitacao_mm'].shift(1).rolling(window=melhor_lag).sum()
        
        fig_scatter = go.Figure()
        fig_scatter.add_trace(go.Scatter(
            x=df_plot_corr['Chuva_Acumulada'],
            y=df_plot_corr['Nivel_m'],
            mode='markers',
            marker=dict(color='rgba(220, 53, 69, 0.6)')
        ))
        fig_scatter.update_layout(
            title=f'N칤vel do Rio vs. Chuva Acumulada nos {melhor_lag} dias anteriores',
            xaxis_title=f'Chuva Acumulada nos {melhor_lag} dias (mm)',
            yaxis_title='N칤vel do Rio (m)'
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
else:
    st.warning(f"N칚o foi poss칤vel calcular a correla칞칚o para {ano_corr}. Verifique os dados de entrada.")

# --- 5. SE칂츾O "SOBRE" NA BARRA LATERAL---
st.sidebar.title("Sobre o Projeto")

url_foto = "https://imgur.com/a/1aVvt6F" 
st.sidebar.image(url_foto, caption="Gustavu Vin칤cius de Sousa Martins", use_column_width=True)

# --- INFORMA칂칏ES ATUALIZADAS ---
st.sidebar.info(
    """
    Este projeto foi desenvolvido como requisito para a conclus칚o da disciplina de 
    **An치lise de Dados**, como parte do curso de **An치lise e Desenvolvimento de Sistemas** da **Universidade Est치cio de S치**.
    
    **Autor:** Gustavu Vin칤cius de Sousa Martins
    
    O objetivo 칠 aplicar t칠cnicas de an치lise de dados para gerar insights de 
    relev칙ncia para a comunidade de Porto Alegre, RS, a partir de dados p칰blicos.
    
    **Fontes de Dados:**
    - **N칤vel do Rio:** Ag칡ncia Nacional de 츼guas (ANA)
    - **Dados de Chuva:** Instituto Nacional de Meteorologia (INMET)
    """
)
st.sidebar.markdown("---")
st.sidebar.markdown("Para ver o c칩digo-fonte, acesse o [reposit칩rio no GitHub](https://github.com/SEU-USUARIO/SEU-REPOSITORIO).") # <--- SUBSTITUA PELO SEU LINK DO GITHUB
